Selenide = Consice API for Selenium WebDriver

== What is Selenide?
Selenide is a library for easier using of Selenium WebDriver for automated tests in Java.

 @Test
 public void testLogin() {
   open("/login");
   $(By.name("user.name")).setValue("johny");
   $("#submit").click();
   $("#username").shouldHave(text("Hello, Johny!"));
 }

Look here for detailed comparision of Selenide and Selenium WebDriver API.

Probably two the most noticeable methods are (inspired from jQuery):
  $("#insuranceDetailsHeader") - returns WebElement matching given CSS selector
  $$("#insuranceDetailsHeader tr td") - returns list of WebElements matching given CSS selector

== How to start?
Just put selenide.jar to your project and include the following methods:

  include static com.codeborne.selenide.Navigation.*
  include static com.codeborne.selenide.DOM.*

Look for Quick Start[https://github.com/codeborne/selenide/wiki/Quick-Start] for details.

== What benefits gives Selenide over plain Selenium?

Selenium is not a testing library, it just allows you to manipulate browser.
Selenide provides a concise API for using Selenium WebDriver in UI tests:
[Transparent WebDriver]     You don't need to operate with WebDriver directly. With Selenide, setUp/tearDown methods do it for you.
[Convenience methods]       Selenide contains convenient methods for operating controls like textfield, radiobutton and selectbox.
[Ajax support]              when testing Ajax applications, we often need to wait until some element changes its state. Selenide has built-in support for waiting.
[Screenshots]               Selenide can automatically take screenshot of the browser window if test has failed.

You can find more details below.

=== Convenience methods
Selenide contains several methods that make your tests shorter and more readable:

 @Test
 public void canFillComplexForm() {
   open("/client/registration");
   $(By.name("user.name")).setValue("johny");
   selectRadio("user.gender", "male");
   $("#user.preferredLayout").selectOption("plain");
   $("#user.securityQuestion").selectOptionByText("What is my first car?");
 }

=== Ajax support
When testing Ajax applications we often need to wait until some element changes its state. Selenide has built-in methods for waiting.

Any of the following methods waits until the described event happens. Default timeout is 4 seconds.
 $("#topic").should(appear);
 $("#topic").shouldBe(visible);

 $("#topic").should(disappear);
 $("h1").shouldHave(text("Hello"));
 $(".message").shouldNotHave(text("Wait for loading..."));
 $(".password").shouldNotHave(cssClass("errorField"));

etc.


== Resources
* Presentation at TopConf conference[http://asolntsev.github.com/presentations/ui-tests/the_fast_and_the_continuous.topconf.html] (Tallinn, 1. Nov 2012)
* Article on Habrahabr.ru[http://habrahabr.ru/post/143269/] (in Russian)

== Changelog
=== 1.10 (Snapshot, planned release date: January 2013)
* Added method $().exists()
* Added methods $().selectOption() and $().selectOptionByText()
* Changed behaviour of methods byText() and withText(): now spaces in text are ignored
=== 1.9 (Released 5.01.2013)
* No need for waitFor/waitUntil methods. All the $(), getElement() and shouldXXX() methods wait for a few seconds until element appears or condition gets satisfied.
* Added support for PageObjects - see method DOM.page(Class)
* Added methods $().find() with index parameter
* Added method $().setValue()
* Added method DOM.getSelectedRadio()
* Updated to selenium-java:2.26.0
* Added initial support for phantomjs headless webkit browser (-Dbrowser=phantomjs)
* Added support for custom WebDriver initialization by defining com.codeborne.selenide.WebDriverProvider implementation via "browser" system property.
=== 1.8 (Released 29.11.2012)
* Changed Selectors.byText() behaviour - now it matches THE WHOLE TEXT, not a substring.
* A new method Selectors.withText() has been added that matches substring.
* Added option "selenide.start-maximized" (true/false) instead of (deprecated) option "chrome.switches".
* Added support for By.CssSelector to method DOM.getJQuerySelector()
=== 1.7 (Released 22.10.2012)
* Added file uploading functionality (file is taken from test classpath)
* Added methods $().should(), $().shouldHave, $().shouldBe(), $().shouldNot, $().shouldNotBe, $().find()
* Added method $().toString() for logging WebElement in human-readable format.
* Added wait-methods with CSS Selector parameter
* Added method DOM.confirm() for clicking on confirmation dialog (alert)
* Added support for Opera browser
* Added method Navigation.refresh() for reloading current page
* Added condition "present", "notPresent", "exist".
* Added selector "byText" and condition "matchesText" for matching elements by regex

---
== Authors
Selenide was created by Codeborne[http://codeborne.com/], an software development company based in Tallinn, Estonia.

The main committers are:
- Andrei Solntsev <mailto:andrei@codeborne.com>
- Anton Keks <mailto:anton@codeborne.com>
- Maksim SÃ¤kki <mailto:maksim@codeborne.com>
- Vadim Gerasimov <mailto:vadim@codeborne.com>


== License
GPL[http://www.gnu.org/copyleft/gpl.html] 1.0
