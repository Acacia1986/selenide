apply plugin: 'java'
apply plugin: 'maven'

group='com.codeborne'
archivesBaseName = 'selenide'
version='1.7.3-SNAPSHOT'

[compileJava, compileTestJava]*.options.collect {options -> options.encoding = 'UTF-8'}
[compileJava, compileTestJava]*.options.collect {options -> options.debug = true}
[compileJava, compileTestJava]*.options.collect {options -> options.debugOptions.debugLevel = "source,lines,vars"}
sourceCompatibility = 1.7
targetCompatibility = 1.7

defaultTasks 'clean', 'libs', 'test', 'install'

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.seleniumhq.selenium:selenium-java:2.52.0'
  compile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile 'org.mockito:mockito-all:1.10.19'
}

task libs(type: Sync) {
  from configurations.compile
  from configurations.runtime
  from configurations.testCompile
  into "$buildDir/lib"
}

compileJava.dependsOn libs

test {
  include 'com/codeborne/selenide/**/*'
  exclude 'com/codeborne/selenide/integrationtests/**'
}

javadoc {
  failOnError=false
}

task sourcesJar(type: Jar, dependsOn:classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

task chrome(type: Test) {
  systemProperties['selenide.browser'] = 'chrome'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task htmlunit(type: Test) {
  systemProperties['selenide.browser'] = 'htmlunit'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task phantomjs(type: Test) {
  systemProperties['selenide.browser'] = 'phantomjs'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task firefox(type: Test) {
  systemProperties['selenide.browser'] = 'firefox'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

tasks.withType(Test).all { testTask ->
  testTask.systemProperties['file.encoding'] = 'UTF-8'
  testTask.testLogging.showStandardStreams = true
  testTask.systemProperties['BUILD_URL'] = System.getenv()['BUILD_URL']
  testTask.outputs.upToDateWhen { false }
}

task allTests(dependsOn: ['clean', 'test', 'chrome', 'firefox', 'htmlunit', 'phantomjs']) {}

task wrapper(type: Wrapper) {
  gradleVersion = '2.11'
  jarFile = './gradle-wrapper/gradle-wrapper.jar'
  scriptFile = './gradle'
}

